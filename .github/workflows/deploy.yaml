name: Deploy Python App to AWS with Docker Compose

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4
 
      # Build the Docker image
      - name: Build Docker image
        run: docker build -t my-python-app .

      # Save and compress the Docker image
      - name: Save and compress Docker image
        run: |
          docker save my-python-app > my-python-app.tar
          gzip my-python-app.tar

      # Transfer the compressed Docker image and docker-compose.yml to the AWS EC2 instance
      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          # source: "my-python-app.tar.gz"
          target: "/tmp"

      # Load the Docker image and deploy using Docker Compose
      - name: Load image and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            # Navigate to the /tmp directory
            cd /tmp

            # Decompress the Docker image
            gunzip my-python-app.tar.gz

            # Load the Docker image
            docker load < my-python-app.tar

            # Remove the tar file to free up space
            rm -f my-python-app.tar

            # Stop and remove any existing containers
            docker-compose down || true

            # Start the application using Docker Compose
            docker-compose up -d